Sysadmins have to configure stuff
    We spend hours upon hours reading the friendly manuals, watching youtube videos, reading quickstarts and tutorials.
    A lot of what we owe our expertise to is the ability to google better than the next person.
    So we end up with the responsibility to maintain and configure infrastructure

Keeping track of things is hard
    which system is doing what
    what do we patch when
    which stuff in on prem and what's in the cloud
    How do I join my linux systems to our windows domain again?
    How do we keep track of all the things?

We document!
    Here's a list of effective methods of documenting.
    Shout out to my org mode folks?
    I have used them all, you may have your preferred method.
    But then we are still left with some problems.
    Documentation can drift as the system evolves over time.
    Where do we put all this documentation so it's accessible to the team?
    How do we make the time to document what we are changing?
    How do we keep track of changes to documentation and what that means to systems that are on the old way of doing things vs the new way?
    Personally, I hate documentation for the sake of documentation
    You can't document well if you don't know your audience
    Ideally the audience of my documentation is future me, and I don't know what future me is going to forget
    I know from present me that past me was an idiot and did things in very wonky ways
    So how can I keep all this documentation in a way that future me will thank past me and not think I'm an idiot

Infrastructure as code
    We can write our infrastructure as code and store everything in git
    Using git we can keep track of what changed when and by creating descriptive comments for ourselves
    Just by looking at the source code we can and answer, the who, what, where, how, why behind every infrastructure change
    And we aren't documenting for the sake of documentation.
    We are describing, in code, the actual system level changes that will modify our configuration

SaltStack
    Saltstack is a client server technology that, by default, runs as root/SYSTEM on the client
    you can use it to:
        run commands
        install software
        update software
        get information about systems
        store information about systems
        and declare all of this in code as "granular" as you like
    Get used to the salt puns, there are more to come
    Notice the minions are calling into the master
    One of the minions is in the "cloud"
    So what does a configuration change look like in saltstack

Xyz example
    SaltStack enables us to deploy configurations to servers and document the configuration
    What do we need, xyz installed
    How are we installing it, package manager or script
    We need to ensure it's installed or not, the "state" of the installation
    Where are we installing xyz
        Maybe specific servers A and C but not B
        Or all servers that have a specific attribute like an IP address of 10.200.something
    Then deploy our state
        This is where you would leave a helpful git comment for future you
        Git log will show us when, why, and who

Lab time!

Run commands
    Commands executed like this in saltstack happen in parallel
    All machines connected to the salt master will independently run the command and return in whatever order they finish
    And you'll be warned about minions that error
    At this point we have an extremely powerful tool. One console with a constant root shell to everything connected to it.
    You might be tempted to stop here and that would be perfectly understandable
    but let's see what else we can do

